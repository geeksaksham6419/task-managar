#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <regex>

struct Task {
    std::string title;
    std::string timing;
    std::string description;
    int priority; // Added 'priority' as an integer member.
};

struct User {
    std::string firstName;
    std::string lastName;
    std::string email;
    std::string password;
};

bool isValidTimeFormat(const std::string &time) {
    // Use regular expressions to check if the time is in "hh:mm" format.
    std::regex timeRegex(R"(\d{2}:\d{2})");
    return std::regex_match(time, timeRegex);
}

bool isValidPassword(const std::string &password) {
    // Check password requirements.
    std::regex passwordRegex(R"((?=.*[A-Z])(?=.*\d)(?=.*[@#$%^&+=])(?=.{8,10}))");
    return std::regex_match(password, passwordRegex);
}

bool authenticateUser(const std::vector<User> &users, const std::string &email, const std::string &password) {
    for (const User &user : users) {
        if (user.email == email && user.password == password) {
            return true; // Successful authentication.
        }
    }
    return false; // Authentication failed.
}

int main() {
    std::map<std::string, std::vector<Task>> taskManager;
    std::vector<User> users; // Store user information.

    while (true) {
        std::cout << "Task Manager Menu:" << std::endl;
        std::cout << "1. No Account? Register" << std::endl;
        std::cout << "2. Sign In" << std::endl;
        std::cout << "3. Quit" << std::endl;

        int choice;
        std::cin >> choice;
        std::cin.ignore(); // Clear the newline character from the input buffer.

        switch (choice) {
            case 1: // Sign Up
            {
                User user;
                std::cout << "Enter your first name: ";
                std::cin >> user.firstName;
                std::cout << "Enter your last name: ";
                std::cin >> user.lastName;
                std::cout << "Enter your email: ";
                std::cin >> user.email;
                std::cout << "Enter your password: ";
                std::cin >> user.password;

                users.push_back(user);
                std::cout << "Resgistered successfully.....!" << std::endl;
                break;
            }

            case 2: // Log In
            {
                std::string email, password;
                std::cout << "Enter your email: ";
                std::cin >> email;
                std::cout << "Enter your password: ";
                std::cin >> password;

                if (authenticateUser(users, email, password)) {
                    std::cout << "Sign In successful." << std::endl;

                    // Task Manager (if user is logged in)
                    while (true) {
                        std::cout << "Task Manager Menu:" << std::endl;
                        std::cout << "1. Add Task" << std::endl;
                        std::cout << "2. Modify Task" << std::endl;
                        std::cout << "3. Show Tasks" << std::endl;
                        std::cout << "4. Delete Task" << std::endl;
                        std::cout << "5. Log Out" << std::endl;

                        int taskChoice;
                        std::cin >> taskChoice;
                        std::cin.ignore(); // Clear the newline character from the input buffer.

                        switch (taskChoice) {
                            case 1: // Add Task
                            {
                                std::string date;
                                std::cout << "Enter the date (e.g., YYYY-MM-DD): ";
                                std::cin >> date;

                                Task task; // Declare the 'task' variable within this scope.

                                std::cout << "Enter task title: ";
                                std::cin.ignore();
                                std::getline(std::cin, task.title);

                                // Validate and get the time input in "hh:mm" format.
                                do {
                                    std::cout << "Enter task timing (hh:mm): ";
                                    std::cin >> task.timing;
                                } while (!isValidTimeFormat(task.timing));

                                std::cout << "Enter task description: ";
                                std::cin.ignore();
                                std::getline(std::cin, task.description);

                                std::cout << "Enter task priority (integer): ";
                                std::cin >> task.priority;

                                taskManager[date].push_back(task);
                                std::cout << "Task added successfully." << std::endl;
                                break;
                            }

                            case 2: // Modify Task
                            {
                                std::string date;
                                std::cout << "Enter the date (e.g., YYYY-MM-DD) to modify tasks: ";
                                std::cin >> date;

                                if (taskManager.find(date) == taskManager.end()) {
                                    std::cout << "No tasks found for the specified date." << std::endl;
                                } else {
                                    std::cout << "Tasks for " << date << ":" << std::endl;

                                    int i = 1;
                                    for (Task &task : taskManager[date]) {
                                        std::cout << i << ". " << task.title << " (" << task.timing << ")" << std::endl;
                                        i++;
                                    }

                                    int taskChoice;
                                    std::cout << "Enter the task number to modify: ";
                                    std::cin >> taskChoice;

                                    if (taskChoice > 0 && taskChoice <= taskManager[date].size()) {
                                        Task &selectedTask = taskManager[date][taskChoice - 1];

                                        std::cout << "Current task title: " << selectedTask.title << std::endl;
                                        std::cout << "Enter new task title: ";
                                        std::cin.ignore();
                                        std::getline(std::cin, selectedTask.title);

                                        // Validate and get the time input in "hh:mm" format.
                                        do {
                                            std::cout << "Current task timing: " << selectedTask.timing << std::endl;
                                            std::cout << "Enter new task timing (hh:mm): ";
                                            std::cin >> selectedTask.timing;
                                        } while (!isValidTimeFormat(selectedTask.timing));

                                        std::cout << "Current task description: " << selectedTask.description << std::endl;
                                        std::cout << "Enter new task description: ";
                                        std::cin.ignore();
                                        std::getline(std::cin, selectedTask.description);

                                        std::cout << "Task modified successfully." << std::endl;
                                    } else {
                                        std::cout << "Invalid task number." << std::endl;
                                    }
                                }
                                break;
                            }

                            case 3: // Show Tasks
				            {
				                std::cout << "List of Tasks:" << std::endl;
				
				                for (const auto &entry : taskManager) {
				                    const std::string &date = entry.first;
				                    const std::vector<Task> &tasks = entry.second;
				
				                    std::cout << "Tasks for " << date << ":" << std::endl;
				
				                    int i = 1;
				                    for (const Task &task : tasks) {
				                        std::cout << i << ". " << task.title << " (" << task.timing << ")" << std::endl;
				                        i++;
				                    }
				                }
				                break;
				            }


                            case 4: // Delete Task
                            {
                                std::string date;
                                std::cout << "Enter the date (e.g., YYYY-MM-DD) to delete tasks: ";
                                std::cin >> date;

                                if (taskManager.find(date) == taskManager.end()) {
                                    std::cout << "No tasks found for the specified date." << std::endl;
                                } else {
                                    std::cout << "Tasks for " << date << ":" << std::endl;

                                    int i = 1;
                                    for (const Task &task : taskManager[date]) {
                                        std::cout << i << ". " << task.title << " (" << task.timing << ")" << std::endl;
                                        i++;
                                    }

                                    int taskChoice;
                                    std::cout << "Enter the task number to delete: ";
                                    std::cin >> taskChoice;

                                    if (taskChoice > 0 && taskChoice <= taskManager[date].size()) {
                                        taskManager[date].erase(taskManager[date].begin() + taskChoice - 1);
                                        std::cout << "Task deleted successfully." << std::endl;
                                    } else {
                                        std::cout << "Invalid task number." << std::endl;
                                    }
                                }
                                break;
                            }

                            case 5: // Log Out
                                std::cout << "You have been logged out." << std::endl;
                                break;

                            default:
                                std::cout << "Invalid choice. Please select a valid option." << std::endl;
                        }
                    }
                } else {
                    std::cout << "Invalid email or password. Please try again." << std::endl;
                }
                break;
            }

            case 3: // Quit
                std::cout << "All the best for your tasks. Goodbye!" << std::endl;
                return 0;

            default:
                std::cout << "Invalid choice. Please select a valid option." << std::endl;
        }
    }

    return 0;
}
